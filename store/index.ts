import type { Session } from "@supabase/supabase-js";
import { Database, Tables, Enums } from "../types/supabase";

type AdditionalBudgetProfileProperties = {
    budgets?: {
        // Define the structure you expect from your query
        // For example:
        income: Array<{
            amount_gross: number | null;
            number_payments_year: number | null;
            // ... other properties from income
        }>;
        // ... other nested properties
    };
};

// Use an intersection type to combine the autogenerated type with your additional properties
type ExtendedBudgetProfile =
    Database["public"]["Tables"]["budget_profile"]["Row"] &
        AdditionalBudgetProfileProperties;

export const userSessionStore = defineStore({
    id: "userSession",
    state: () => ({
        session: null as Session | null,
    }),
    persist: true,
});

type State = {
    profile: Database["public"]["Tables"]["profiles"]["Row"] | null;
};

type Getters = {};

type Actions = {
    clearProfile(): void;
};

export const userProfileStore = defineStore<"profile", State, Getters, Actions>(
    "profile",
    {
        state: () => ({
            profile: null as
                | Database["public"]["Tables"]["profiles"]["Row"]
                | null,
        }),
        persist: true,
        actions: {
            async fetchBudgetData(userProfileId: string) {
                const { data, error } = await supabase
                    .from("budget_profile")
                    .select(
                        `*,
        profiles(
            *                
        ),
        budgets(
            *,
            objectives(
                *,
                contributions(*)
            ),
            income(
                *, 
                income_sources(*)
            )
        )
    `
                    )
                    .eq("profile", userProfileId)
                    .single();

                if (error) {
                    console.error(error);
                    return;
                }

                this.budgetData = data as ExtendedBudgetProfile;
            },
            clearProfile() {
                this.profile = null;
            },
        },
        getters: {
            totalAnnualGross(state) {
                if (!state.budgetData || !state.budgetData.budgets) {
                    return 0;
                }

                return state.budgetData.budgets.income.reduce(
                    (accumulator: number, currentValue) => {
                        const currentAmount =
                            (currentValue.amount_gross ?? 0) *
                            (currentValue.number_payments_year ?? 1);
                        return accumulator + currentAmount;
                    },
                    0
                );
            },
            totalAnnualVariableGross: (state): number => {
                if (!state.budgetData || !state.budgetData.budgets) {
                    return 0;
                }

                return state.budgetData.budgets.income.reduce(
                    (accumulator: any, currentValue: any) => {
                        const currentAmount =
                            ((currentValue.min_amount +
                                currentValue.max_amount) /
                                2) *
                            (currentValue.number_payments_year ?? 1);
                        console.log(accumulator, currentAmount);
                        return accumulator + currentAmount;
                    },
                    0
                );
            },
            monthlyAnnualGross: (state): number => {
                // Using the existing totalAnnualGross getter
                return useBudgetStore().totalAnnualGross / 12;
            },
        },
    }
);
